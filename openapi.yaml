openapi: 3.0.0
info:
  title: CockTales API
  version: 1.0.0
  description: A detailed description of how to consume the CockTales API. To begin you will be required to register a
    new user via the <b>/api/v1/user/register</b> endpoint to receive new User details and Session Token. <br /><br />
    The session Token will need to be used within subsequent API calls assigning it to the header <b>AuthorizationToken</b>.
    You can store this token using the 'Authorize' button below and any generated curl requests will be autogenerated with
    the required headers and their valid credentials.<br /><br />
    If your token expires you will be required to use the <b>/api/v1/user/login</b> endpoint to retrieve a new token.
servers:
  - url: http://api-staging.cocktales.io
    description: Staging environment
security:
  - AuthorizationToken: []
  - AuthenticationToken: []

paths:
  /api/v1/user/register:
    post:
      security: []
      requestBody:
        description: Register a new user with CockTales
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email user wishes to register a new user against
                  example: johnsmith@hotmail.com
                password:
                  type: string
                  example: complicated-password-123

      responses:
        200:
          description: Returns a registered users details and a valid session token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                        example: '6bf615e8-283c-4048-b4bc-f9a2eddf65b8'

        default:
          description: Error/Fail Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        422:
          $ref: '#/components/responses/UnprocessableEntity'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/user/login:
    post:
      security: []
      requestBody:
        description: Login to the service
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email user has registered to the service with
                  example: johnsmith@hotmail.com
                password:
                  type: string
                  example: complicated-password-123

      responses:
        200:
          description: Returns a registered users id and a valid session token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
                      token:
                        type: string
                        example: '6bf615e8-283c-4048-b4bc-f9a2eddf65b8'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/user/update:
    post:
      requestBody:
        description: Update a registered users details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - email
                - password
              properties:
                user_id:
                  type: string
                  description: ID provided when a user registered with this service
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
                email:
                  type: string
                  description: Email address used to access this service
                  example: newemailforjohnsmith@hotmail.com
                password:
                  type: string
                  description: Password used to access this service
                  example: complicated-password-123
                newPassword:
                  type: string
                  description: New password (if wishing to update)
                  example: new-complicated-password-789

      responses:

        200:
          description: Returns a users updated details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UpdatedUser'
        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        404:
          $ref: '#/components/responses/NotFound'

        422:
          $ref: '#/components/responses/UnprocessableEntity'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/user/get:
    get:
      requestBody:
        description: Retrieve an existing users details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  description: ID provided when a user registered with this service
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'

      responses:

        200:
          description: Returns a registered users details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/profile/create:
    post:
      requestBody:
        description: Create a profile for a registered user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'

      responses:
        200:
          description: Returns a success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        422:
          $ref: '#/components/responses/UnprocessableEntity'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/profile/update:
    post:
      requestBody:
        description: Update a profile for a registered user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedProfile'

      responses:
        200:
          description: Returns a success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        404:
          $ref: '#/components/responses/NotFound'

        422:
          $ref: '#/components/responses/UnprocessableEntity'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/profile/get:
    get:
      requestBody:
        description: Retrieve an existing users profile information
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  description: ID provided when a user registered with this service
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'

      responses:

        200:
          description: Returns a registered users profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      profile:
                        $ref: '#/components/schemas/Profile'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/avatar/create:
    post:
      requestBody:
        description: Create an avatar for an existing user in base64 format
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ID provided when a user registered with this service
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
                image:
                  type: string
                  description: The raw string content of the image
                format:
                  type: string
                  description: The format of the image
                  example: base64

      responses:
        200:
          description: Returns a success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/avatar/update:
    post:
      requestBody:
        description: Update an avatar for an existing user in base64 format
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ID provided when a user registered with this service
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
                image:
                  type: string
                  description: The raw string content of the image
                format:
                  type: string
                  description: The format of the image
                  example: base64

      responses:
        200:
          description: Returns a success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/avatar/get:
    get:
      requestBody:
        description: Retrieve an existing users avatar image
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  description: ID provided when a user registered with this service
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'

      responses:

        200:
          description: Returns a registered users avatar image string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      avatar:
                        $ref: '#/components/schemas/Avatar'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/ingredient/all:
    get:
      responses:

        200:
          description: Returns an array of all ingredients
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      allIngredients:
                        type: array
                        items:
                          $ref: '#/components/schemas/Ingredient'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/ingredient/all-by-type:
    get:
      responses:

        200:
          description: Returns an array of all ingredients
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      allIngredientsByType:
                        type: array
                        items:
                          $ref: '#/components/schemas/Ingredient'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/ingredient/all-by-category:
    get:
      responses:

        200:
          description: Returns an array of all ingredients
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      allIngredientsByCategory:
                        type: array
                        items:
                          $ref: '#/components/schemas/Ingredient'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/cocktail/create:
    post:
      requestBody:
        description: Create a new cocktail
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - cocktail
                - ingredients
                - instructions
              properties:
                user_id:
                  type: string
                  description: ID provided when a user registered with this service
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
                cocktail:
                  type: object
                  properties:
                    name:
                      type: string
                      description: THe unique name of the new cocktail
                      example: The Titty Twister
                    origin:
                      type: string
                      description: An story behind the creation of the cocktail
                      example: 'A creation made on a hot beach in the summer of 1998'
                ingredients:
                  type: array
                  items:
                    $ref: '#/components/schemas/Ingredient'
                instructions:
                  type: array
                  items:
                    $ref: '#/components/schemas/Instruction'

      responses:

        200:
          description: Returns a newly created cocktail's unique ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      cocktail_id:
                        type: string
                        example: '57e3d7a6-ea98-43b0-b820-5ad40c55bc7b'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        422:
          $ref: '#/components/responses/UnprocessableEntity'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/cocktail/get-by-id:
    get:
      requestBody:
        description: Retrieve full cocktail information of a created cocktail
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cocktail_id
              properties:
                cocktail_id:
                  type: string
                  description: ID of created cocktail
                  example: '57e3d7a6-ea98-43b0-b820-5ad40c55bc7b'

      responses:

        200:
          description: Returns a newly created cocktail's unique ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      cocktail:
                        type: object
                        $ref: '#/components/schemas/Cocktail'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
            $ref: '#/components/responses/BadRequest'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/cocktail/get-by-user:
    get:
      requestBody:
        description: Retrieve full cocktail information of a created cocktail created by a specific user
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  description: ID of user
                  example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'

      responses:

        200:
          description: Returns an array of cocktails created by a specific user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      cocktails:
                        type: array
                        items:
                          $ref: '#/components/schemas/Cocktail'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/cocktail/get-by-ingredients:
    get:
      requestBody:
        description: Retrieve full cocktail information which ingredients include provided ingredients
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ingredients
              properties:
                ingredients:
                  type: array
                  description: Array of ingredients ID's
                  example: ['c6b90687-de68-4c4d-bbc8-18614271c378', 'cf9c967a-b006-4939-b3df-71eaf70255cf']

      responses:

        200:
          description: Returns an array of cocktails which include provided ingredients
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      cocktails:
                        type: array
                        items:
                          $ref: '#/components/schemas/Cocktail'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/cocktail-image/create:
    post:
      requestBody:
        description: Create an image for an existing cocktail in base64 format
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cocktail_id:
                  type: string
                  description: ID of the previously created cocktail
                  example: '204cc190-904f-41c1-b8c7-e3ce5c89fdd5'
                image:
                  type: string
                  description: The raw string content of the image
                format:
                  type: string
                  description: The format of the image
                  example: base64

      responses:
        200:
          description: Returns a success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/cocktail-image/update:
    post:
      requestBody:
        description: Update an image for an existing cocktail in base64 format
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cocktail_id:
                  type: string
                  description: ID of the previously created cocktail
                  example: '204cc190-904f-41c1-b8c7-e3ce5c89fdd5'
                image:
                  type: string
                  description: The raw string content of the image
                format:
                  type: string
                  description: The format of the image
                  example: base64

      responses:
        200:
          description: Returns a success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        401:
          $ref: '#/components/responses/Unauthorized'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

  /api/v1/cocktail-image/get:
    get:
      requestBody:
        description: Retrieve an existing cocktail image
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                cocktail_id:
                  type: string
                  description: ID of the previously created cocktail
                  example: '204cc190-904f-41c1-b8c7-e3ce5c89fdd5'

      responses:

        200:
          description: Returns a previously created cocktails image string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      avatar:
                        $ref: '#/components/schemas/Avatar'

        default:
          description: Error/Fail Response structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'

        400:
          $ref: '#/components/responses/BadRequest'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/ServerError'

components:

  securitySchemes:
    AuthorizationToken:
      type: apiKey
      name: AuthorizationToken
      in: header

    AuthenticationToken:
      type: apiKey
      name: AuthenticationToken
      in: header

  schemas:
    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
        email:
          type: string
          example: 'johnsmith@hotmail.com'
        created_at:
          type: string
          example: '12-03-2017'
        updated_at:
          type: string
          example: '25-03-2017'

    UpdatedUser:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
        email:
          type: string
          example: newemailforjohnsmith@hotmail.com
        created_at:
          type: string
          example: '12-03-2017'
        updated_at:
          type: string
          example: '25-03-2017'

    Profile:
      type: object
      required:
        - user_id
        - username
      properties:
        user_id:
          type: string
          example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
        username:
          type: string
          example: 'bigboy99'
        first_name:
          type: string
          example: 'Joe'
        last_name:
          type: string
          example: 'Sweeny'
        location:
          type: string
          example: 'Consett, Durham'
        slogan:
          type: string
          example: 'Get drunk and be happy!!'
        created_at:
          type: string
          example: '12-03-2017'
        updated_at:
          type: string
          example: '25-03-2017'

    UpdatedProfile:
      type: object
      required:
        - user_id
        - username
      properties:
        user_id:
          type: string
          example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
        username:
          type: string
          example: 'IluvCocktails'
        first_name:
          type: string
          example: 'John'
        last_name:
          type: string
          example: 'Smith'
        location:
          type: string
          example: 'Romford, Essex'
        slogan:
          type: string
          example: 'Get drunk and be happy!!'
        created_at:
          type: string
          example: '12-03-2017'
        updated_at:
          type: string
          example: '25-03-2017'

    Avatar:
      type: string

    Ingredient:
      type: object
      required:
        - id
        - name
        - category
        - type
      properties:
        id:
          type: string
          example: 'cf9c967a-b006-4939-b3df-71eaf70255cf'
        name:
          type: string
          example: 'Bombay Sapphire Gin'
        category:
          type: string
          example: 'Spirit'
          enum:
            - 'Spirit'
            - 'Liqueur'
            - 'Wine'
            - 'Beer'
            - 'Cider'
            - 'Champagne'
            - 'Mixer'
            - 'Garnish'
        type:
          type: string
          example: 'Gin'
          enum:
            - 'Brandy'
            - 'Cachaca'
            - 'Gin'
            - 'Rum'
            - 'Schnapps'
            - 'Tequila'
            - 'Vodka'
            - 'Whiskey'
            - 'Berry Liqueur'
            - 'Chocolate Liqueur'
            - 'Coffee Liqueur'
            - 'Cream Liqueur'
            - 'Flower Liqueur'
            - 'Fruit Liqueur'
            - 'Herbal Liqueur'
            - 'Honey Liqueur'
            - 'Nut Liqueur'
            - 'Whiskey Liqueur'
            - 'Other Liqueur'
            - 'Champagne'
            - 'Red Wine'
            - 'Port'
            - 'White Win'
            - 'Rose Wine'
            - 'Vermouth'
            - 'Sherry'
            - 'Lager'
            - 'Ale'
            - 'Apple Cider'
            - 'Berry Cider'
            - 'Mixed Fruit Cider'
            - 'Soft Drink'
            - 'Fruit Juice'
            - 'Bitters'
            - 'Syrup'
            - 'Mix'
            - 'Alcopop'
            - 'Garnish'

    Instruction:
      type: object
      required:
        - number
        - text
      properties:
        number:
          type: integer
          example: 1
        text:
          type: string
          example: 'Shake well in cocktail shaker'

    CocktailImage:
      type: string

    Cocktail:
      type: object
      required:
        - cocktail
        - ingredients
        - instructions
      properties:
        cocktail:
          type: object
          properties:
            id:
              type: string
              example: '204cc190-904f-41c1-b8c7-e3ce5c89fdd5'
            name:
              type: string
              example: 'Tequila Sunrise'
            user_id:
              type: string
              example: 'e1aafff7-5672-42c6-a20e-a5f51ba3d7a4'
            origin:
              type: string
              example: 'Made on the beach watching the sunset while in the arms of a beautiful woman'
            created_at:
              type: string
              example: '12-03-2017'
        ingredients:
          type: array
          items:
            $ref: '#components/schemas/Ingredient'
        instructions:
          type: array
          items:
            $ref: '#components/schemas/Instruction'

    StandardResponse:
      type: object
      required:
      - status
      - data
      properties:
        status:
          type: string
          example: fail
          enum:
          - error
          - fail
          - success
        data:
          type: object
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/Error'

    Error:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
          example: Something went wrong
          description: A human-readable description of the error
        code:
          type: integer
          example: 1
          description: A code to identify the error. "1" is used when no specific error code has been defined for this error

    ErrorData:
      type: array
      items:
        type: object
        required:
          - message
          - code
        properties:
          message:
            type: string
            description: 'A human-readable description of the error'
          code:
            type: number
            description: 'A code to identify the error. "1" is used when no specific error code has been defined for this error'

  responses:

    BadRequest:
      description: Unable to process the request in the structure provided by the user

    NotFound:
      description: The specified resource was not found

    Unauthorized:
      description: User is not authorized to perform this action

    UnprocessableEntity:
      description: Unable to create or update an entity with the information provided by the user

    ServerError:
      description: Internal server error

